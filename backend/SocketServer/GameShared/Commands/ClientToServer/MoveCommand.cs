using System.Net.Sockets;
using GameShared.Commands.ServerToClient;
using GameShared.Interfaces;

namespace GameShared.Commands.ClientToServer;

public class MoveCommand : IClientToServerCommandHandler
{
    public ClientToServerEvent CommandType => ClientToServerEvent.MOVE;
    public int PacketSize => 6; // üî• –†–∞–∑–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã —Ç–µ–ø–µ—Ä—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π

    public int PlayerId { get; private set; }
    public int Direction { get; private set; }

    // üî• –¢–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å `FieldOffsets` —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π, —á—Ç–æ–±—ã –¥–æ—Å—Ç—É–ø –±—ã–ª –æ—Ç–æ–≤—Å—é–¥—É
    public static Dictionary<string, int> FieldOffsets { get; protected set; } = new()
    {
        { "PlayerId", 1 }, // ID –∏–≥—Ä–æ–∫–∞ —Å 1-–≥–æ –±–∞–π—Ç–∞
        { "Direction", 5 }  // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å 5-–≥–æ –±–∞–π—Ç–∞
    };

    public void ParseFromBytes(byte[] data)
    {
        PlayerId = BitConverter.ToInt32(data, FieldOffsets["PlayerId"]);
        Direction = data[FieldOffsets["Direction"]];
    }

    public byte[] ToBytes()
    {
        byte[] result = new byte[PacketSize];
        result[0] = (byte)CommandType;
        BitConverter.GetBytes(PlayerId).CopyTo(result, FieldOffsets["PlayerId"]);
        result[FieldOffsets["Direction"]] = (byte)Direction;
        return result;
    }

    public async Task Execute(PaperServer server, Socket clientSocket)
    {
        Console.WriteLine($"–ò–≥—Ä–æ–∫ {PlayerId} —Å–º–µ–Ω–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ {Direction}");

        // if (server.Players.TryGetValue(PlayerId, out var player))
        // {
        //     player.CurrentDirection = (Direction)Direction;
        // }

        byte[] response = new PlayerMoveCommand(PlayerId, Direction).ToBytes();
        await server.Broadcast(response);
    }
}