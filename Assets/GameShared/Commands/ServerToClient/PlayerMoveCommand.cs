using GameShared;
using GameShared.Interfaces;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace GameShared.Commands.ServerToClient
{

    public class PlayerMoveCommand : IServerToClientCommandHandler
    {
        public ServerToClientEvent CommandType => ServerToClientEvent.PLAYER_MOVE;
        public int PacketSize => 6; // 1 –±–∞–π—Ç - –∫–æ–º–∞–Ω–¥–∞, 4 –±–∞–π—Ç–∞ - PlayerId, 1 –±–∞–π—Ç - –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ

        public int PlayerId { get; private set; }
        public int Direction { get; private set; }

        public static Dictionary<string, int> FieldOffsets { get; protected set; } = new()
    {
        { "PlayerId", 1 },
        { "Direction", 5 }
    };

        public PlayerMoveCommand() { }

        public PlayerMoveCommand(int playerId, int direction)
        {
            PlayerId = playerId;
            Direction = direction;
        }

        public void ParseFromBytes(byte[] data)
        {
            PlayerId = BitConverter.ToInt32(data, FieldOffsets["PlayerId"]);
            Direction = data[FieldOffsets["Direction"]];
        }

        public byte[] ToBytes()
        {
            byte[] result = new byte[PacketSize];
            result[0] = (byte)CommandType;
            BitConverter.GetBytes(PlayerId).CopyTo(result, FieldOffsets["PlayerId"]);
            result[FieldOffsets["Direction"]] = (byte)Direction;
            return result;
        }

        public async Task Execute(PaperClient client)
        {
            UnityEngine.Debug.Log($"–ò–≥—Ä–æ–∫ {PlayerId} —Å–º–µ–Ω–∏–ª –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ {Direction}");

            // üî• Unity –º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –µ–≥–æ
        }
    }
}